
+- subspace correction methods for QCD applications -+
|                                                    |
|  Use option >> -? << for help                      |
|                                                    |
+----------------------------------------------------+


Number of Processes: 16
Program is being started...



+----------------------------------------------------------+
| The DDalphaAMG solver library.                           |
| Copyright (C) 2016, Matthias Rottmann, Artur Strebel,    |
|       Simon Heybrock, Simone Bacchio, Bjoern Leder.      |
|                                                          |
| This program comes with ABSOLUTELY NO WARRANTY.          |
+----------------------------------------------------------+

configuration: conf/qcdsf.632.01000.mg2

Desired average plaquette: 1.6479691428981 in [0,3]
BASIS0:OPENQCD/DD-HMC BASIS
periodic in time boundary conditions
Configuration stored...
average plaquette: 1.6479691428981

+----------------------------------------------------------+
| read in and set up the parallel dirac operator           |
| elapsed wall clock time: 2.48664      seconds            |
+----------------------------------------------------------+
initial definition --- depth: 0
malloc of "op->odd_proj" failed: pointer is not NULL (build/gsrc/operator_double.c:128).
depth: 0, time spent for setting up next coarser operator: 35.479732 seconds
malloc of "op->odd_proj" failed: pointer is not NULL (build/gsrc/operator_double.c:128).
initial definition --- depth: 1
malloc of "op->odd_proj" failed: pointer is not NULL (build/gsrc/operator_double.c:128).
depth: 1, time spent for setting up next coarser operator: 0.963631 seconds
malloc of "op->odd_proj" failed: pointer is not NULL (build/gsrc/operator_double.c:128).
initial definition --- depth: 2
malloc of "op->odd_proj" failed: pointer is not NULL (build/gsrc/operator_double.c:128).
depth: 2, time spent for setting up next coarser operator: 0.061865 seconds
malloc of "op->odd_proj" failed: pointer is not NULL (build/gsrc/operator_double.c:128).
malloc of "op->odd_proj" failed: pointer is not NULL (build/gsrc/operator_double.c:128).

initial coarse grid correction is defined
elapsed time: 117.849350 seconds

+----------------------------------------------------------+
| 4-level method                                           |
| postsmoothing K-cycle                                    |
| FGMRES + red-black multiplicative Schwarz                |
|          restart length: 10                              |
|                      m0: -0.335450                       |
|                     csw: +1.919200                       |
+----------------------------------------------------------+
|   preconditioner cycles: 1                               |
|            inner solver: minimal residual iteration      |
|               precision: double                          |
+---------------------- depth  0 --------------------------+
|          global lattice: 64  32  32  32                  |
|           local lattice: 16  16  16  32                  |
|           block lattice: 4   4   4   4                   |
|        post smooth iter: 3                               |
|     smoother inner iter: 4                               |
|              setup iter: 5                               |
|            test vectors: 24                              |
+---------------------- depth  1 --------------------------+
|          global lattice: 16  8   8   8                   |
|           local lattice: 4   4   4   8                   |
|           block lattice: 2   2   2   2                   |
|        post smooth iter: 3                               |
|     smoother inner iter: 4                               |
|              setup iter: 4                               |
|            test vectors: 28                              |
+---------------------- depth  2 --------------------------+
|          global lattice: 8   4   4   4                   |
|           local lattice: 2   2   2   4                   |
|           block lattice: 2   2   2   2                   |
|        post smooth iter: 3                               |
|     smoother inner iter: 4                               |
|              setup iter: 4                               |
|            test vectors: 28                              |
+---------------------- depth  3 --------------------------+
|          global lattice: 4   2   2   2                   |
|           local lattice: 1   1   1   2                   |
|           block lattice: 1   1   1   1                   |
|      coarge grid solver: odd even GMRES                  |
|              iterations: 50                              |
|                  cycles: 20                              |
|               tolerance: 1e-01                           |
+----------------------------------------------------------+
|          K-cycle length: 30                              |
|        K-cycle restarts: 10                              |
|       K-cycle tolerance: 1e-01                           |
+----------------------------------------------------------+


+----------------------------------------------------------+
| solver profiling                                         |
+----------------------------------------------------------+
| depth:   0 / level:   3                time    ( count ) |
+----------------------------------------------------------+
|          global inner product, double: 1.20e-01(     24) |
|      2 flop vector operations, double: 6.48e-01(    168) |
|      8 flop vector operations, double: 1.36e+00(    576) |
|               copy operations, double: 4.29e+00(    817) |
|          set value operations, double: 3.79e+00( 442536) |
| interpolation and restriction, double: 2.21e+00(     24) |
|                 self coupling, double: 5.86e+00( 294912) |
|                      smoother, double: 6.28e+01(    144) |
|            operator comm init, double: 4.66e-03(   1296) |
|            operator comm wait, double: 9.94e-01(   1296) |
|                    allreduces, double: 6.63e-03(     24) |
|    Gram-Schmidt on aggregates, double: 1.87e+00(      1) |
|     smoother - pt 3, res comm, double: 4.10e+00(  73728) |
|   smoother - pt 4, solve comm, double: 5.50e+01(  73728) |
+----------------------------------------------------------+
| depth:   1 / level:   2                time    ( count ) |
+----------------------------------------------------------+
|          global inner product, double: 3.71e-03(     28) |
|      2 flop vector operations, double: 9.45e-03(    196) |
|      8 flop vector operations, double: 6.59e-02(   1344) |
|               copy operations, double: 9.51e-02(   1072) |
|          set value operations, double: 9.01e-02(  34528) |
| interpolation and restriction, double: 4.36e-02(     28) |
|                      smoother, double: 9.14e+00(    168) |
|            operator comm init, double: 2.70e-03(   1512) |
|            operator comm wait, double: 1.65e-01(   1512) |
|                    allreduces, double: 1.43e-03(     28) |
|    Gram-Schmidt on aggregates, double: 2.67e-02(      1) |
|     smoother - pt 3, res comm, double: 1.37e+00(   5376) |
|   smoother - pt 4, solve comm, double: 7.55e+00(   5376) |
+----------------------------------------------------------+
| depth:   2 / level:   1                time    ( count ) |
+----------------------------------------------------------+
|          global inner product, double: 2.66e-04(     28) |
|      2 flop vector operations, double: 5.45e-04(    196) |
|      8 flop vector operations, double: 3.62e-03(   1344) |
|               copy operations, double: 1.02e-02(   1456) |
|          set value operations, double: 5.99e-03(   2604) |
|                      smoother, double: 7.65e-01(    168) |
|            operator comm init, double: 9.07e-04(   1512) |
|            operator comm wait, double: 1.74e-02(   1512) |
|                    allreduces, double: 1.52e-04(     28) |
|    Gram-Schmidt on aggregates, double: 1.93e-03(      1) |
|     smoother - pt 3, res comm, double: 1.16e-01(    336) |
|   smoother - pt 4, solve comm, double: 6.26e-01(    336) |
+----------------------------------------------------------+
| depth:   3 / level:   0                time    ( count ) |
+----------------------------------------------------------+
+----------------------------------------------------------+
| flop/lattice site:  1.65e+08                             |
| flop/s/MPIprocess:  1.83e+11                             |
+----------------------------------------------------------+

depth: 0, bootstrap step number 1...
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000011+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000017+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000014+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000021+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000015+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000012+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000013+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000017+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000016+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000016+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000013+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000024+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000015+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000017+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000015+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000022+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000013+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000011+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000016+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000019+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000013+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000015+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000023+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000017+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000021+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000020+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000018+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000018+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000017+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000015+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000016+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000018+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000012+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000012+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000013+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000015+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000014+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000018+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000017+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000022+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000014+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000020+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000012+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000017+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000015+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000014+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000015+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000015+0.000000i
depth: 0, time spent for setting up next coarser operator: 35.460993 seconds
depth: 1, time spent for setting up next coarser operator: 0.978905 seconds
depth: 2, time spent for setting up next coarser operator: 0.064119 seconds
depth: 1, bootstrap step number 1...
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.009291+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.004758+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.003240+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.002429+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.002033+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001715+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001661+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001513+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001436+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001457+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001323+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001382+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001410+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001453+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001255+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001190+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001143+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001116+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001297+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001187+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001209+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001247+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001299+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001156+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001193+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001278+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001202+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.001227+0.000000i
depth: 1, time spent for setting up next coarser operator: 0.954788 seconds
depth: 2, time spent for setting up next coarser operator: 0.064376 seconds
depth: 2, bootstrap step number 1...
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000043+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000043+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000018+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000018+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000015+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000014+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000012+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000010+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000010+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000009+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000009+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000009+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000010+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000007+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000008+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000010+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000008+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000008+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000009+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000008+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000009+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000008+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000010+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000008+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000008+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000007+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000008+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000008+0.000000i
depth: 2, time spent for setting up next coarser operator: 0.061472 seconds
depth: 0, bootstrap step number 2...
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001062+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000765+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000564+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000609+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000504+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000533+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000771+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000512+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000579+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000474+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000401+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000403+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000598+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000671+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000446+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000688+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000569+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000739+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000728+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000413+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000535+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000653+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000522+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000681+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000701+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000491+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000902+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000600+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000630+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000541+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000461+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000936+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000735+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000631+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000540+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000631+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000492+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000487+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000453+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000661+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000786+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000649+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000545+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000488+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000528+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000571+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000498+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000381+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000533+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000499+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000595+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000482+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000493+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000704+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000492+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000471+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000512+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000493+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000581+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000541+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000570+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000498+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000528+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000557+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000658+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000844+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000540+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000463+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000511+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000502+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000700+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000594+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000529+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000634+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000551+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000442+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000642+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000425+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000452+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000637+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000513+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000471+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000410+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000528+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000417+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000407+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000758+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000428+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000531+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000499+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000715+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000519+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000630+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000444+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000586+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000556+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001039+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000737+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000561+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000688+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000531+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000496+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000748+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000638+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000429+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000406+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000565+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000391+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000865+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000376+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000687+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000441+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000464+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000480+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000735+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000514+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000412+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000542+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000492+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000409+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000813+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000534+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000540+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000662+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000612+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000670+0.000000i
depth: 0, time spent for setting up next coarser operator: 35.450180 seconds
depth: 1, time spent for setting up next coarser operator: 0.981537 seconds
depth: 2, time spent for setting up next coarser operator: 0.064980 seconds
depth: 1, bootstrap step number 1...
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.008916+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.008505+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.007104+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.005716+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.006334+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.006177+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.005116+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.006043+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.005791+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.005024+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.005115+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.006477+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.005189+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.005572+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.005342+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.005745+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.005313+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.005010+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.004869+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.005079+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.005535+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.006082+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.004701+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.004216+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.004065+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.004727+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000000+0.000000i
from fgmres : depth: 2, iter: 1, p->H(1,0) = +0.003903+0.000000i
depth: 1, time spent for setting up next coarser operator: 0.958631 seconds
depth: 2, time spent for setting up next coarser operator: 0.065163 seconds
depth: 1, bootstrap step number 2...
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000469+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000261+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000275+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000305+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000250+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000250+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000275+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000276+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000321+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000474+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000447+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000347+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000327+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000278+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000359+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000254+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000252+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000331+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000263+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000313+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000327+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000307+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000240+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000343+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000271+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000350+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000273+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000237+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000297+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000288+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000206+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000284+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000289+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000244+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000219+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000254+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000253+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000357+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000423+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000385+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000451+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000371+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000248+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000284+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000495+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000205+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000293+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000409+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000280+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000243+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000347+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000335+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000276+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000289+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000269+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000341+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000303+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000352+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000236+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000366+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000206+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000245+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000288+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000256+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000328+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000342+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000197+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000230+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000295+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000181+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000369+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000273+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000260+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000309+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000284+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000209+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000264+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000335+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000315+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000312+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000251+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000175+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000297+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000381+0.000000i
depth: 1, time spent for setting up next coarser operator: 0.957950 seconds
depth: 2, time spent for setting up next coarser operator: 0.065784 seconds
depth: 2, bootstrap step number 1...
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003050+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001085+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000961+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001220+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000753+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000874+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001349+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000824+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001133+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000747+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001006+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001023+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000922+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001036+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001082+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000830+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000945+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000828+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001106+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000782+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000716+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001144+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001086+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000670+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000800+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000806+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000778+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000759+0.000000i
depth: 2, time spent for setting up next coarser operator: 0.061727 seconds
depth: 2, bootstrap step number 2...
depth: 2, time spent for setting up next coarser operator: 0.061609 seconds
depth: 0, bootstrap step number 3...
depth: 0, time spent for setting up next coarser operator: 35.464785 seconds
depth: 1, time spent for setting up next coarser operator: 0.978454 seconds
depth: 2, time spent for setting up next coarser operator: 0.064413 seconds
depth: 1, bootstrap step number 1...
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000002+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000002+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000001+0.000000i
depth: 1, time spent for setting up next coarser operator: 0.958684 seconds
depth: 2, time spent for setting up next coarser operator: 0.065360 seconds
depth: 1, bootstrap step number 2...
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.005706+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002146+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003615+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.006081+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003552+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003284+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.005496+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.005680+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003442+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004641+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003466+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004315+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004152+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003588+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003899+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003490+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003754+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004038+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004424+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001730+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003380+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004126+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002711+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003059+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.006173+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004190+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.006500+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004726+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004104+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003915+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.005341+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004046+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003959+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003109+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004235+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003613+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003312+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002808+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002068+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003126+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.005066+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003680+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004511+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004107+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004360+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003231+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004975+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.005359+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003735+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003480+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003553+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002300+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002394+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003220+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002296+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002419+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002220+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002835+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003641+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001848+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002780+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004948+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004789+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003183+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003306+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003108+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002805+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003034+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003065+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002764+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001927+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003859+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003959+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002675+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004512+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002708+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004831+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.005068+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004549+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.005234+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003854+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002166+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002836+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004271+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003618+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003601+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003304+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003265+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004022+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003068+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003215+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002978+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003743+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002908+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002948+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003904+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002867+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003070+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002468+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003091+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004134+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002761+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002873+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004602+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.006070+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004057+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.005370+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003313+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002545+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003529+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004725+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003625+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003353+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002945+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004080+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003494+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002537+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002793+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004359+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001832+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002292+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004055+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004441+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002781+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002192+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002899+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002581+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003206+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002348+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002158+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003447+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002436+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004884+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001777+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001786+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002136+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003190+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002683+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003320+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002789+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002047+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002667+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003323+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001907+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002102+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002593+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002497+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003630+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002004+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.001863+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002822+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.002482+0.000000i
depth: 1, time spent for setting up next coarser operator: 0.957670 seconds
depth: 2, time spent for setting up next coarser operator: 0.065685 seconds
depth: 2, bootstrap step number 1...
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008431+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004888+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009658+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003323+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009747+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008693+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009636+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.004912+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.005011+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.003886+0.000000i
depth: 2, time spent for setting up next coarser operator: 0.061719 seconds
depth: 2, bootstrap step number 2...
depth: 2, time spent for setting up next coarser operator: 0.061500 seconds
depth: 0, bootstrap step number 4...
depth: 0, time spent for setting up next coarser operator: 35.470645 seconds
depth: 1, time spent for setting up next coarser operator: 0.982653 seconds
depth: 2, time spent for setting up next coarser operator: 0.065360 seconds
depth: 1, bootstrap step number 1...
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000121+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000117+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000124+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000095+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000125+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000094+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000115+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000099+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000082+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000118+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000077+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000107+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000076+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000116+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000070+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000115+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000054+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000102+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000072+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000131+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000073+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000099+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000081+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000131+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000076+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000110+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000068+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000121+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000084+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000120+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000069+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000107+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000058+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000077+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000075+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000115+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000059+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000102+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000061+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000099+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000069+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000110+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000066+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000105+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000059+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000083+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000056+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000074+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000065+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000105+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000063+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000120+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000045+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000101+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000062+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000104+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000053+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.000120+0.000000i
depth: 1, time spent for setting up next coarser operator: 0.958864 seconds
depth: 2, time spent for setting up next coarser operator: 0.065483 seconds
depth: 1, bootstrap step number 2...
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009879+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009707+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009504+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009626+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009777+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008251+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009541+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.007904+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009843+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008163+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009252+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009407+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008805+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008446+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.006373+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008513+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.007150+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.007611+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.005887+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009482+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009150+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009915+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008841+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008842+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009766+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009062+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.007025+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008286+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009991+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008571+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008628+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008871+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008781+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008500+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009641+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009332+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009823+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008927+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008618+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.007106+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009928+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.005873+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008492+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009470+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009390+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008457+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009288+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.007829+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.007910+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009947+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008276+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009165+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009855+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008583+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009441+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.007430+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009453+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009604+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009859+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.007746+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009831+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009625+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009750+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009439+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.007584+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008143+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009063+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009615+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009376+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009786+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009246+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008579+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009084+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008115+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008809+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008646+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009736+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009860+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009921+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009052+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009884+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009552+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009761+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009344+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009264+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.007117+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009256+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008841+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008360+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.006138+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.007566+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008794+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008055+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.006856+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009704+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009056+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009071+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009318+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009053+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009788+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.008743+0.000000i
from fgmres : depth: 3, iter: 1, p->H(1,0) = +0.009907+0.000000i
depth: 1, time spent for setting up next coarser operator: 0.959966 seconds
depth: 2, time spent for setting up next coarser operator: 0.067355 seconds
depth: 1, bootstrap step number 3...
depth: 1, time spent for setting up next coarser operator: 0.959674 seconds
depth: 2, time spent for setting up next coarser operator: 0.065265 seconds
depth: 2, bootstrap step number 1...
depth: 2, time spent for setting up next coarser operator: 0.062216 seconds
depth: 2, bootstrap step number 2...
depth: 2, time spent for setting up next coarser operator: 0.061458 seconds
depth: 2, bootstrap step number 3...
depth: 2, time spent for setting up next coarser operator: 0.061546 seconds
depth: 0, bootstrap step number 5...
depth: 0, time spent for setting up next coarser operator: 35.427968 seconds
depth: 1, time spent for setting up next coarser operator: 0.979209 seconds
depth: 2, time spent for setting up next coarser operator: 0.064959 seconds
depth: 1, bootstrap step number 1...
depth: 1, time spent for setting up next coarser operator: 0.954024 seconds
depth: 2, time spent for setting up next coarser operator: 0.064528 seconds
depth: 1, bootstrap step number 2...
depth: 1, time spent for setting up next coarser operator: 0.952305 seconds
depth: 2, time spent for setting up next coarser operator: 0.065371 seconds
depth: 1, bootstrap step number 3...
depth: 1, time spent for setting up next coarser operator: 0.952360 seconds
depth: 2, time spent for setting up next coarser operator: 0.064589 seconds
depth: 1, bootstrap step number 4...
depth: 1, time spent for setting up next coarser operator: 0.954007 seconds
depth: 2, time spent for setting up next coarser operator: 0.064657 seconds
depth: 2, bootstrap step number 1...
depth: 2, time spent for setting up next coarser operator: 0.061740 seconds
depth: 2, bootstrap step number 2...
depth: 2, time spent for setting up next coarser operator: 0.061712 seconds
depth: 2, bootstrap step number 3...
depth: 2, time spent for setting up next coarser operator: 0.061339 seconds
depth: 2, bootstrap step number 4...
depth: 2, time spent for setting up next coarser operator: 0.061222 seconds

performed 5 iterative setup steps
elapsed time: 887.604293 seconds (198.140102 seconds on coarse grid)


+----------------------------------------------------------+
| solver profiling                                         |
+----------------------------------------------------------+
| depth:   0 / level:   3                time    ( count ) |
+----------------------------------------------------------+
|          global inner product, double: 1.17e+00(    240) |
|         process inner product, double: 9.26e+00(    120) |
|      2 flop vector operations, double: 3.93e+00(    720) |
|      8 flop vector operations, double: 1.82e+01(   2820) |
|       other vector operations, double: 2.57e+01(      5) |
|               copy operations, double: 7.48e+00(   1800) |
|          set value operations, double: 1.99e+00(1105920) |
| interpolation and restriction, double: 2.33e+01(    240) |
|                 self coupling, double: 1.72e+01( 798720) |
|                      smoother, double: 1.68e+02(    360) |
|            operator comm init, double: 1.49e-02(   4320) |
|            operator comm wait, double: 3.50e+00(   4320) |
|                    allreduces, double: 3.81e-01(    355) |
|    Gram-Schmidt on aggregates, double: 9.41e+00(      5) |
|     smoother - pt 3, res comm, double: 2.42e+01( 184320) |
|   smoother - pt 4, solve comm, double: 1.36e+02( 184320) |
+----------------------------------------------------------+
| depth:   1 / level:   2                time    ( count ) |
+----------------------------------------------------------+
|          global inner product, double: 2.98e-01(   1502) |
|         process inner product, double: 4.05e-01(    926) |
|      2 flop vector operations, double: 3.47e-01(   5206) |
|      6 flop vector operations, double: 1.30e-02(    120) |
|      8 flop vector operations, double: 1.46e+00(  29422) |
|       other vector operations, double: 5.67e-01(     12) |
|               copy operations, double: 7.58e-01(  12222) |
|          set value operations, double: 5.65e-01( 581596) |
| interpolation and restriction, double: 3.31e+00(   1852) |
|                 self coupling, double: 1.48e+00(    590) |
|             neighbor coupling, double: 1.51e+01(    590) |
|                      smoother, double: 1.71e+02(   2778) |
|            operator comm init, double: 6.77e-02(  36876) |
|            operator comm wait, double: 2.51e+00(  36876) |
|                    allreduces, double: 6.66e-01(   2416) |
|    Gram-Schmidt on aggregates, double: 9.12e-01(     34) |
|     smoother - pt 3, res comm, double: 4.37e+01(  88896) |
|   smoother - pt 4, solve comm, double: 1.24e+02(  88896) |
|          Hessenberg: qr update double: 1.85e-04(  13152) |
|         Hessenberg: bkwd subst double: 5.87e-05(   2782) |
+----------------------------------------------------------+
| depth:   2 / level:   1                time    ( count ) |
+----------------------------------------------------------+
|          global inner product, double: 9.00e-01(  14191) |
|         process inner product, double: 7.02e-01(  12267) |
|      2 flop vector operations, double: 3.57e-01(  63465) |
|      6 flop vector operations, double: 7.62e-03(    926) |
|      8 flop vector operations, double: 1.29e+00( 448131) |
|       other vector operations, double: 4.38e-02(     12) |
|               copy operations, double: 4.94e-01( 148099) |
|          set value operations, double: 2.19e-01( 154929) |
| interpolation and restriction, double: 2.88e+00(  24534) |
|                 self coupling, double: 2.33e+00(  12137) |
|             neighbor coupling, double: 2.13e+01(  12137) |
|                      smoother, double: 1.92e+02(  36801) |
|            operator comm init, double: 3.30e-01( 514434) |
|            operator comm wait, double: 6.56e+00( 514434) |
|                    allreduces, double: 2.11e+00(  26446) |
|    Gram-Schmidt on aggregates, double: 1.11e-01(     58) |
|     smoother - pt 3, res comm, double: 4.77e+01(  73602) |
|   smoother - pt 4, solve comm, double: 1.37e+02(  73602) |
|          Hessenberg: qr update double: 4.07e-03( 828762) |
|         Hessenberg: bkwd subst double: 1.24e-03( 150113) |
+----------------------------------------------------------+
| depth:   3 / level:   0                time    ( count ) |
+----------------------------------------------------------+
|          global inner product, double: 1.46e-01(   6158) |
|         process inner product, double: 2.35e-02(  14850) |
|      2 flop vector operations, double: 3.44e-02(  20987) |
|      6 flop vector operations, double: 2.56e-03(   6148) |
|      8 flop vector operations, double: 1.01e-01( 377506) |
|               copy operations, double: 1.32e-02(  35529) |
|          set value operations, double: 3.12e-01(2703359) |
|                 self coupling, double: 4.68e+00( 335777) |
|             neighbor coupling, double: 3.98e+01( 335777) |
|            operator comm init, double: 2.08e+00(4029324) |
|            operator comm wait, double: 3.94e+00(4029324) |
|                    allreduces, double: 3.84e-01(  42016) |
|          Hessenberg: qr update double: 2.84e-03( 719316) |
|         Hessenberg: bkwd subst double: 1.16e-03( 150307) |
+----------------------------------------------------------+
| flop/lattice site:  4.62e+08                             |
| flop/s/MPIprocess:  6.82e+10                             |
+----------------------------------------------------------+

Trace computation via Hutchinson's method ...
	finest (and only) level ...
+----------------------------------------------------------+
| approx. rel. res. after  1      iterations: 6.030204e-02 |
| approx. rel. res. after  2      iterations: 1.602230e-02 |
| approx. rel. res. after  3      iterations: 5.843550e-03 |
| approx. rel. res. after  4      iterations: 1.613502e-03 |
| approx. rel. res. after  5      iterations: 5.008395e-04 |
| approx. rel. res. after  6      iterations: 1.492696e-04 |
| approx. rel. res. after  7      iterations: 5.026038e-05 |
| approx. rel. res. after  8      iterations: 1.434969e-05 |
| approx. rel. res. after  9      iterations: 4.161765e-06 |
| approx. rel. res. after  10     iterations: 1.185218e-06 |
| approx. rel. res. after  11     iterations: 4.025232e-07 |
| approx. rel. res. after  12     iterations: 1.390270e-07 |
| approx. rel. res. after  13     iterations: 6.089581e-08 |
| approx. rel. res. after  14     iterations: 1.738236e-08 |
| approx. rel. res. after  15     iterations: 5.233684e-09 |
+----------------------------------------------------------+

+----------------------------------------------------------+
|       FGMRES iterations: 15     coarse average: 36.33    |
| exact relative residual: ||r||/||b|| = 5.233684e-09      |
| elapsed wall clock time: 36.3670  seconds                |
|        coarse grid time: 8.4472   seconds (23.2%)        |
|        coarsest grid time: 0.7906   seconds (02.2%)        |
| coarsest grid matmul time: 0.0000   seconds (00.0%)        |
|  consumed core minutes*: 9.70e+00 (solve only)           |
|    max used mem/MPIproc: 4.69e+00 GB                     |
+----------------------------------------------------------+
*: only correct if #MPIprocs*#threads == #CPUs


+----------------------------------------------------------+
| solver profiling                                         |
+----------------------------------------------------------+
| depth:   0 / level:   3                time    ( count ) |
+----------------------------------------------------------+
|          global inner product, double: 8.71e-02(     17) |
|         process inner product, double: 4.53e-01(     15) |
|      2 flop vector operations, double: 4.18e-01(     78) |
|      6 flop vector operations, double: 1.07e-02(      1) |
|      8 flop vector operations, double: 1.31e+00(    264) |
|               copy operations, double: 8.09e-01(    211) |
|          set value operations, double: 2.49e-01( 138240) |
| interpolation and restriction, double: 2.91e+00(     30) |
|                 self coupling, double: 2.60e+00(  99856) |
|             neighbor coupling, double: 1.56e+00(     16) |
|                      smoother, double: 2.10e+01(     45) |
|            operator comm init, double: 2.38e-03(    636) |
|            operator comm wait, double: 5.10e-01(    636) |
|                    allreduces, double: 5.56e-02(     32) |
|     smoother - pt 3, res comm, double: 3.02e+00(  23040) |
|   smoother - pt 4, solve comm, double: 1.70e+01(  23040) |
|          Hessenberg: qr update double: 7.68e-06(    420) |
|         Hessenberg: bkwd subst double: 1.80e-06(     85) |
+----------------------------------------------------------+
| depth:   1 / level:   2                time    ( count ) |
+----------------------------------------------------------+
|          global inner product, double: 2.72e-02(     44) |
|         process inner product, double: 2.89e-03(     29) |
|      2 flop vector operations, double: 1.23e-02(    160) |
|      6 flop vector operations, double: 1.61e-03(     15) |
|      8 flop vector operations, double: 3.69e-02(    753) |
|               copy operations, double: 1.70e-02(    334) |
|          set value operations, double: 5.70e-03(   2809) |
| interpolation and restriction, double: 1.03e-01(     58) |
|                 self coupling, double: 7.30e-02(     29) |
|             neighbor coupling, double: 7.41e-01(     29) |
|                      smoother, double: 5.35e+00(     87) |
|            operator comm init, double: 2.26e-03(   1218) |
|            operator comm wait, double: 8.45e-02(   1218) |
|                    allreduces, double: 5.55e-02(     73) |
|     smoother - pt 3, res comm, double: 1.37e+00(   2784) |
|   smoother - pt 4, solve comm, double: 3.88e+00(   2784) |
|          Hessenberg: qr update double: 8.26e-06(    258) |
|         Hessenberg: bkwd subst double: 4.00e-06(     72) |
+----------------------------------------------------------+
| depth:   2 / level:   1                time    ( count ) |
+----------------------------------------------------------+
|          global inner product, double: 5.92e-03(    102) |
|         process inner product, double: 8.11e-04(     73) |
|      2 flop vector operations, double: 2.39e-03(    394) |
|      6 flop vector operations, double: 2.61e-04(     29) |
|      8 flop vector operations, double: 5.26e-03(   1928) |
|               copy operations, double: 2.49e-03(    832) |
|          set value operations, double: 1.12e-03(    565) |
| interpolation and restriction, double: 1.73e-02(    146) |
|                 self coupling, double: 1.41e-02(     73) |
|             neighbor coupling, double: 1.28e-01(     73) |
|                      smoother, double: 1.15e+00(    219) |
|            operator comm init, double: 2.09e-03(   3066) |
|            operator comm wait, double: 3.90e-02(   3066) |
|                    allreduces, double: 1.15e-02(    175) |
|     smoother - pt 3, res comm, double: 2.89e-01(    438) |
|   smoother - pt 4, solve comm, double: 8.20e-01(    438) |
|          Hessenberg: qr update double: 1.44e-05(    792) |
|         Hessenberg: bkwd subst double: 6.36e-06(    205) |
+----------------------------------------------------------+
| depth:   3 / level:   0                time    ( count ) |
+----------------------------------------------------------+
|          global inner product, double: 1.14e-03(     37) |
|         process inner product, double: 5.84e-04(    272) |
|      2 flop vector operations, double: 5.03e-04(    309) |
|      6 flop vector operations, double: 1.60e-05(     37) |
|      8 flop vector operations, double: 2.04e-03(   7575) |
|               copy operations, double: 1.76e-04(    571) |
|          set value operations, double: 5.21e-03(  48126) |
|                 self coupling, double: 8.17e-02(   5958) |
|             neighbor coupling, double: 6.96e-01(   5958) |
|            operator comm init, double: 3.68e-02(  71496) |
|            operator comm wait, double: 6.68e-02(  71496) |
|                    allreduces, double: 5.26e-03(    619) |
|          Hessenberg: qr update double: 6.49e-05(  20790) |
|         Hessenberg: bkwd subst double: 2.09e-05(   4010) |
+----------------------------------------------------------+
| flop/lattice site:  5.59e+07                             |
| flop/s/MPIprocess:  2.02e+11                             |
+----------------------------------------------------------+

-----------------------------------
-----------------------------------
	 Solve time 36.367387,	 Iters 15, 	 ||r||= 2.625506e-05, 	 ||r||/||b|| = 5.233684e-09, 	 used_tol 1.000000e-08,	 coarsest:tol 1.000000e-01
-----------------------------------
-----------------------------------
Plain Solve Time:	36.511650
1	 	variance = 0.000000+i0.000000 	 t = 36.569512, 	 d = 0.866
	... done
Average solve time 36.569532 
... done
Trace computation via 'traditional' difference levels ...
	difference levels ...
+----------------------------------------------------------+
| approx. rel. res. after  1      iterations: 6.050718e-02 |
| approx. rel. res. after  2      iterations: 1.353286e-02 |
| approx. rel. res. after  3      iterations: 4.661996e-03 |
| approx. rel. res. after  4      iterations: 1.570310e-03 |
| approx. rel. res. after  5      iterations: 4.185585e-04 |
| approx. rel. res. after  6      iterations: 1.469231e-04 |
| approx. rel. res. after  7      iterations: 4.483845e-05 |
| approx. rel. res. after  8      iterations: 1.332823e-05 |
| approx. rel. res. after  9      iterations: 4.334786e-06 |
| approx. rel. res. after  10     iterations: 1.227247e-06 |
| approx. rel. res. after  11     iterations: 3.825828e-07 |
| approx. rel. res. after  12     iterations: 1.120928e-07 |
| approx. rel. res. after  13     iterations: 3.923828e-08 |
| approx. rel. res. after  14     iterations: 1.205503e-08 |
| approx. rel. res. after  15     iterations: 3.808128e-09 |
+----------------------------------------------------------+

+----------------------------------------------------------+
|       FGMRES iterations: 15     coarse average: 37.47    |
| exact relative residual: ||r||/||b|| = 3.808128e-09      |
| elapsed wall clock time: 36.3617  seconds                |
|        coarse grid time: 8.5115   seconds (23.4%)        |
|        coarsest grid time: 0.8292   seconds (02.3%)        |
| coarsest grid matmul time: 0.0000   seconds (00.0%)        |
|  consumed core minutes*: 9.70e+00 (solve only)           |
|    max used mem/MPIproc: 4.69e+00 GB                     |
+----------------------------------------------------------+
*: only correct if #MPIprocs*#threads == #CPUs


+----------------------------------------------------------+
| solver profiling                                         |
+----------------------------------------------------------+
| depth:   0 / level:   3                time    ( count ) |
+----------------------------------------------------------+
|          global inner product, double: 9.46e-02(     17) |
|         process inner product, double: 4.54e-01(     15) |
|      2 flop vector operations, double: 4.16e-01(     78) |
|      6 flop vector operations, double: 1.07e-02(      1) |
|      8 flop vector operations, double: 1.31e+00(    264) |
|               copy operations, double: 8.22e-01(    211) |
|          set value operations, double: 2.49e-01( 138240) |
| interpolation and restriction, double: 2.91e+00(     30) |
|                 self coupling, double: 2.59e+00(  99856) |
|             neighbor coupling, double: 1.52e+00(     16) |
|                      smoother, double: 2.10e+01(     45) |
|            operator comm init, double: 2.34e-03(    636) |
|            operator comm wait, double: 5.32e-01(    636) |
|                    allreduces, double: 5.08e-02(     32) |
|     smoother - pt 3, res comm, double: 3.02e+00(  23040) |
|   smoother - pt 4, solve comm, double: 1.69e+01(  23040) |
|          Hessenberg: qr update double: 8.34e-06(    420) |
|         Hessenberg: bkwd subst double: 2.76e-06(     85) |
+----------------------------------------------------------+
| depth:   1 / level:   2                time    ( count ) |
+----------------------------------------------------------+
|          global inner product, double: 3.16e-02(     44) |
|         process inner product, double: 2.84e-03(     29) |
|      2 flop vector operations, double: 1.19e-02(    160) |
|      6 flop vector operations, double: 1.63e-03(     15) |
|      8 flop vector operations, double: 3.69e-02(    753) |
|               copy operations, double: 1.68e-02(    334) |
|          set value operations, double: 5.52e-03(   2809) |
| interpolation and restriction, double: 1.03e-01(     58) |
|                 self coupling, double: 7.29e-02(     29) |
|             neighbor coupling, double: 7.40e-01(     29) |
|                      smoother, double: 5.35e+00(     87) |
|            operator comm init, double: 2.31e-03(   1218) |
|            operator comm wait, double: 9.54e-02(   1218) |
|                    allreduces, double: 6.59e-02(     73) |
|     smoother - pt 3, res comm, double: 1.37e+00(   2784) |
|   smoother - pt 4, solve comm, double: 3.88e+00(   2784) |
|          Hessenberg: qr update double: 2.46e-05(    258) |
|         Hessenberg: bkwd subst double: 3.96e-06(     72) |
+----------------------------------------------------------+
| depth:   2 / level:   1                time    ( count ) |
+----------------------------------------------------------+
|          global inner product, double: 4.63e-03(    103) |
|         process inner product, double: 8.15e-04(     74) |
|      2 flop vector operations, double: 2.30e-03(    399) |
|      6 flop vector operations, double: 2.43e-04(     29) |
|      8 flop vector operations, double: 5.34e-03(   1956) |
|               copy operations, double: 2.44e-03(    843) |
|          set value operations, double: 1.10e-03(    573) |
| interpolation and restriction, double: 1.74e-02(    148) |
|                 self coupling, double: 1.43e-02(     74) |
|             neighbor coupling, double: 1.30e-01(     74) |
|                      smoother, double: 1.16e+00(    222) |
|            operator comm init, double: 2.09e-03(   3108) |
|            operator comm wait, double: 4.09e-02(   3108) |
|                    allreduces, double: 9.51e-03(    177) |
|     smoother - pt 3, res comm, double: 2.92e-01(    444) |
|   smoother - pt 4, solve comm, double: 8.29e-01(    444) |
|          Hessenberg: qr update double: 1.44e-05(    810) |
|         Hessenberg: bkwd subst double: 7.44e-06(    209) |
+----------------------------------------------------------+
| depth:   3 / level:   0                time    ( count ) |
+----------------------------------------------------------+
|          global inner product, double: 9.11e-04(     37) |
|         process inner product, double: 6.24e-04(    281) |
|      2 flop vector operations, double: 4.85e-04(    318) |
|      6 flop vector operations, double: 1.56e-05(     37) |
|      8 flop vector operations, double: 2.12e-03(   7980) |
|               copy operations, double: 1.80e-04(    599) |
|          set value operations, double: 5.43e-03(  50536) |
|                 self coupling, double: 8.55e-02(   6256) |
|             neighbor coupling, double: 7.31e-01(   6256) |
|            operator comm init, double: 3.89e-02(  75072) |
|            operator comm wait, double: 7.13e-02(  75072) |
|                    allreduces, double: 5.84e-03(    636) |
|          Hessenberg: qr update double: 6.70e-05(  22020) |
|         Hessenberg: bkwd subst double: 2.10e-05(   4232) |
+----------------------------------------------------------+
| flop/lattice site:  5.59e+07                             |
| flop/s/MPIprocess:  2.02e+11                             |
+----------------------------------------------------------+

-----------------------------------
-----------------------------------
	 Solve time 36.362078,	 Iters 15, 	 ||r||= 1.910369e-05, 	 ||r||/||b|| = 3.808128e-09, 	 used_tol 1.000000e-08,	 coarsest:tol 1.000000e-01
-----------------------------------
-----------------------------------
-----------------------------------
-----------------------------------
	 Solve time 4.715527,	 Iters 15, 	 ||r||= 6.090577e-06, 	 ||r||/||b|| = 9.705707e-09, 	 used_tol 1.000000e-08,	 coarsest:tol 1.000000e-01
-----------------------------------
-----------------------------------
1	 	variance = 0.000000+i0.000000 	 t = 41.536400, 	 d = 0.866
-----------------------------------
-----------------------------------
	 Solve time 4.804656,	 Iters 15, 	 ||r||= 5.634609e-06, 	 ||r||/||b|| = 8.985624e-09, 	 used_tol 1.000000e-08,	 coarsest:tol 1.000000e-01
-----------------------------------
-----------------------------------
-----------------------------------
-----------------------------------
	 Solve time 0.899713,	 Iters 25, 	 ||r||= 1.241158e-06, 	 ||r||/||b|| = 7.335225e-09, 	 used_tol 1.000000e-08,	 coarsest:tol 1.000000e-01
-----------------------------------
-----------------------------------
1	 	variance = 0.000000+i0.000000 	 t = 5.739967, 	 d = 0.447
-----------------------------------
-----------------------------------
	 Solve time 0.929447,	 Iters 25, 	 ||r||= 9.516534e-07, 	 ||r||/||b|| = 5.620175e-09, 	 used_tol 1.000000e-08,	 coarsest:tol 1.000000e-01
-----------------------------------
-----------------------------------
-----------------------------------
-----------------------------------
	 Solve time 0.062742,	 Iters 43, 	 ||r||= 1.719050e-07, 	 ||r||/||b|| = 5.484199e-09, 	 used_tol 1.000000e-08,	 coarsest:tol 1.000000e-08
-----------------------------------
-----------------------------------
1	 	variance = 0.000000+i0.000000 	 t = 0.994830, 	 d = 0.224
	... done
	coarsest level ...
-----------------------------------
-----------------------------------
	 Solve time 0.065576,	 Iters 45, 	 ||r||= 6.200019e-07, 	 ||r||/||b|| = 2.071281e-08, 	 used_tol 1.000000e-08,	 coarsest:tol 1.000000e-08
-----------------------------------
-----------------------------------
Plain Solve Time:	0.065727
1	 	variance = 0.000000+i0.000000 	 t = 0.065753, 	 d = 0.000
	... done
... done
TIME MLMC  48.337039

-----
Resulting trace from MLMC  = 6844150.966119+i-895.413525 
-----
[31mwarning: amount of not freed memory: 0.032635 MB
[0m